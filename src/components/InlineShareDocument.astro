---
import redirects from '../../public/redirects.json';
import { useTranslations } from '~/i18n/util';

const t = useTranslations(Astro);

import { allPages } from '~/content';
import { Icon } from '@astrojs/starlight/components';
const currentPath = Astro.url.pathname;
const currentPage = allPages.find((page) => page.slug === currentPath.replace(/^\/|\/$/g, ''));
const currentHref = Astro.url.href;
const currentTitle = currentPage?.data.title || 'Unified field theory';
let shortHref = undefined;
if (currentPage?.slug) {
	const absHref = `/${currentPage.slug}`;
	const invertedRedirects = Object.fromEntries(
		Object.entries(redirects).map(([key, value]) => [value, key])
	);

	const shortLink = invertedRedirects[absHref];
	if (shortLink) {
		shortHref = `https://uft.link${shortLink}`;
	}
}
const twitterHref = `https://twitter.com/intent/tweet?text=${currentTitle}&url=${currentHref}&via=unifiedfieldtheory`;
const { toc } = Astro.props;
---

{
	!toc && shortHref && (
		<div class="sl-flex">
			<span>
				<b>{t('share.title')}</b>
			</span>
			<a
				href={twitterHref}
				class="sl-flex"
				target="_blank"
				aria-label="Share to Twitter"
				title="Share to Twitter"
			>
				<Icon name="x.com" size="1.2em" />
			</a>
			<a
				id="inlineExternalAction"
				class="sl-flex"
				aria-label="Copy External Link"
				title="Copy External Link"
			>
				<Icon name="external" size="1.5em" />
			</a>
			<a id="inlineApproveCheckAction" class="sl-hidden">
				<Icon name="approve-check" size="1.5em" />
			</a>
		</div>
	)
}

<style>
	div {
		flex-wrap: wrap;
		gap: 0.5rem;
		font-size: var(--sl-text-sm);
	}
	a {
		gap: 0.5rem;
		align-items: center;
		text-decoration: none;
		color: var(--sl-color-gray-3);
	}
	a:hover {
		color: var(--sl-color-white);
	}
	div svg {
		transition: transform 0.3s;
		transform: translateY(0px);
		&:hover {
			transform: translateY(-2px);
		}
	}
</style>

<script define:vars={{ shortHref }}>
	document.addEventListener('DOMContentLoaded', (event) => {
		const externalAction = document.getElementById('inlineExternalAction');
		const approveCheckAction = document.getElementById('inlineApproveCheckAction');

		if (externalAction) {
			externalAction.addEventListener('click', () => {
				navigator.clipboard
					.writeText(shortHref)
					.then(() => {
						externalAction.classList.remove('sl-flex');
						externalAction.classList.add('sl-hidden');
						approveCheckAction.classList.remove('sl-hidden');
						approveCheckAction.classList.add('sl-flex');
						setTimeout(() => {
							externalAction.classList.remove('sl-hidden');
							externalAction.classList.add('sl-flex');
							approveCheckAction.classList.remove('sl-flex');
							approveCheckAction.classList.add('sl-hidden');
						}, 1000);
					})
					.catch((err) => {
						console.error('Failed to copy: ', err);
					});
			});
		}
	});
</script>
